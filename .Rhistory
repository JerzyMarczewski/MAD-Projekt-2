# pobieranie danych
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
library(RCurl)
# pobieranie danych
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
# usuwamy puste wiersze
wine_data <- na.omit(wine_data)
wine_data <- wine_data[-1]
wine_data
# pobieranie danych
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
# usuwamy puste wiersze
wine_data <- na.omit(wine_data)
wine_data
table(wine_data$quality)
round(prop.table(table(wine_data$quality)) * 100, digits = 1)
wine_data_norm <- as.data.frame(lapply(wine_data), normalize)
wine_data_norm <- as.data.frame(lapply(wine_data[1:11]), normalize)
wine_data_norm <- as.data.frame(lapply(wine_data[1:11]), FUN = normalize)
wine_data_norm <- as.data.frame(lapply(wine_data[1:11]), normalize))
wine_data_norm <- as.data.frame(lapply(wine_data[1:11], normalize))
normalize <- function(x) {
return((x - min(x) / (max(x) - min(x))))
}
wine_data_norm <- as.data.frame(lapply(wine_data[1:11], normalize))
sample <- sample(c(TRUE, FALSE), nrow(iris), replace=TRUE, prob=c(0.7,0.3))
wine_data_train <- wine_data[sample, ]
wine_data_test <- wine_data[!sample, ]
install.packages("class")
library(class)
wine_data_test_pred <- knn(train = wine_data_train, test = wine_data_test, k = 10)
wine_data_train_labels <- wine_data[sample, 1]
wine_data_test_labels <- wine_data[!sample, 1]
wine_data_test_pred <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = 10)
wine_data_test_pred
install.packages("gmodels")
library(gmodels)
CrossTable(x = wine_data_test_labels, y = wine_data_test_pred, prop.chisq =  F)
NROW(wine_data_train_labels)
1118^(1/2)
33 * 33
33.43651 * 33.43651
knn.33 <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = 33)
knn.34 <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = 34)
ACC.33 <- 100 * sum(wine_data_test_labels == knn.33)/NROW(wine_data_test_labels)
ACC.33
ACC.34 <- 100 * sum(wine_data_test_labels == knn.34)/NROW(wine_data_test_labels)
ACC.34
table(knn.33, wine_data_test_labels)
table(knn.34, wine_data_test_labels)
library(caret)
confusionMatrix(table(knn.33, wine_data_test_labels))
i = 1
k.optm = 1
for (i in 1:34) {
knn.mod <- knn(train = wine_data, test = wine_data_test, cl = wine_data_train_labels, k = i)
k.optm[i] < 100 * sum(wine_data_test_labels == kn.mod)/NROW(wine_data_test_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
knn.mod <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = i)
for (i in 1:34) {
knn.mod <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = i)
k.optm[i] < 100 * sum(wine_data_test_labels == kn.mod)/NROW(wine_data_test_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
knn.mod <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = i)
k.optm[i] < 100 * sum(wine_data_test_labels == kn.mod)/NROW(wine_data_test_labels)
k=i
cat(k,'=',k.optm[i],'
')
for (i in 1:34) {
knn.mod <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = i)
k.optm[i] < 100 * sum(wine_data_test_labels == kn.mod)/NROW(wine_data_test_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
for (i in 1:34) {
knn.mod <- knn(train = wine_data_train, test = wine_data_test, cl = wine_data_train_labels, k = i)
k.optm[i] < 100 * sum(wine_data_test_labels == knn.mod)/NROW(wine_data_test_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
plot(k.optm, type = "b", xlab="K- Value", ylab = "Accuracy level")
set.seed(123)
dat.d <- sample(1:nrow(wine_data_norm),size=nrow(wine_data_norm)*0.7,replace = FALSE) #random selection of 70% data.
train.wine <- wine_data[dat.d,] # 70% training data
test.wine <- wine_data[-dat.d,] # remaining 30% test data
train.wine_labels <- wine_data[dat.d, 1]
test.wine_labels <- wine_data[-dat.d, 1]
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],' ')
}
k.optm = 1
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],
'')
}
confusionMatrix(table(knn.33, test.wine_labels))
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
NROW(test.wine_labels)
480^(1/2)
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 21)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 22)
ACC.33 <- 100 * sum(test.wine_labels == knn.33)/NROW(test.wine_labels)
ACC.34 <- 100 * sum(test.wine_labels == knn.34)/NROW(test.wine_labels)
confusionMatrix(table(knn.33, test.wine_labels))
table(knn.33, test.wine_labels)
ACC.33
ACC.34
train.wine_labels
wine_data
wine_data[1,1]
wine_data[0,1]
library(RCurl)
# pobieranie danych
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
str(wine_data)
wine_data_subset <-
colnames(wine_data)
wine_data_subset <-
colnames(wine_data)
colnames(wine_data)
wine.subset <- colnames(wine_data)
str(wine.subset)
wine.subset <- wine_data[colnames(wine_data)]
str(wine.subset)
library(RCurl)
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
wine.subset <- wine_data[colnames(wine_data)]
str(wine.subset)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
wine.subset[,1:11]
wine.subset.norm <- as.data.frame(lapply(wine.subset[,1:11], normalize))
head(wine.subset.norm)
set.seed(123)
dat.d <- sample(1:nrow(wine.subset.norm), size=nrow(wine.subset.norm)*0.7, replace = F)
train.wine <- wine.subset[dat.d,]
test.wine <- wine.subset[-dat.d]
train.wine_labels <- wine.subset[dat.d, 1]
train.wine_labels
test.wine_labels <- wine.subset[-dat.d, 1]
library(class)
NROW(train.wine_labels)
1119^(1/2)
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
train.wine_labels <- wine.subset[dat.d, 1]
test.wine_labels <- wine.subset[-dat.d, 1]
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
test.wine <- wine.subset[-dat.d,]
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
knn.33
Acc.33 <- 100 * sum(test.wine_labels == knn.33)/NROW(test.wine_labels)
Acc.33
Acc.33 <- 100 * sum(test.wine_labels == knn.33)/NROW(test.wine_labels)
Acc.34 <- 100 * sum(test.wine_labels == knn.34)/NROW(test.wine_labels)
Acc.34
table(knn.33, test.wine_labels)
wine.subset
wine.subset[dat.d, 1]
head(wine.subset.norm)
wine.subset[dat.d,]
train.wine_labels <- wine.subset[dat.d, 12]
test.wine_labels <- wine.subset[-dat.d, 12]
knn.33 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 33)
knn.34 <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 34)
Acc.33 <- 100 * sum(test.wine_labels == knn.33)/NROW(test.wine_labels)
Acc.34 <- 100 * sum(test.wine_labels == knn.34)/NROW(test.wine_labels)
table(knn.33, test.wine_labels)
table(knn.34, test.wine_labels)
library(caret)
confusionMatrix(table(knn.33, test.wine_labels))
i = 1
k.optm = 1
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],
'')
}
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] < 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
for (i in 1:34) {
knn.mod <- knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = i)
k.optm[i] <- 100 * sum(test.wine_labels == knn.mod)/NROW(test.wine_labels)
k=i
cat(k,'=',k.optm[i],'
')
}
plot(k.optm, type = "b", xlab = "K-Value", ylab = "Accuracy level")
knn(train = train.wine, test = test.wine, cl = train.wine_labels, k = 1)
NROW(train.wine_labels)
table(knn.33, test.wine_labels)
library(RCurl)
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
library(tidyverse)
library(modelr)
library(broom)
install.packages("broom")
install.packages("broom")
library(broom)
install.packages('ISLR')
library(ISLR)
library(RCurl)
wine_gh <- getURL("https://raw.githubusercontent.com/JerzyMarczewski/MAD-Projekt-2/main/winequality-red.csv")
wine_data <- read.csv(text = wine_gh, header = T, sep = ';', dec = '.')
mydata <- as_tibble(ISLR::Default)
library(ISLR)
mydata <- as_tibble(ISLR::Default)
install.packages(tibble)
install.packages('tibble')
install.packages("tibble")
library(tibble)
mydata <- as_tibble(ISLR::Default)
mydata
sum(is.na(mydata))
sample <- sample(c(TRUE, FALSE), nrow(mydata), replace = T, prob = c(0.6, 0.4))
train <- mydata[sample,]
test <- mydata[!sample,]
logmodel <- glm(default ~ balance, family = "binomial", data = train)
mydata %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
library(ggplot2)
mydata %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
logmodel
mydata %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
library(dplyr)
mydata %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
summary(logmodel)
summary(logmodel_test)
logmodel_test <- glm(default ~ balance, family = "binomial", data = test)
summary(logmodel_test)
predict(logmodel, data.frame(balance = c(5)), type = "response")
